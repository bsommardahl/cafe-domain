// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("bs-jest/lib/js/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var DiscountGroup = require("./DiscountGroup.js");

function buildOrderItem(name, suggestedPrice) {
  return /* record */[
          /* sku */"test",
          /* name */name,
          /* suggestedPrice */suggestedPrice,
          /* addedOn */0.0,
          /* salePrice */0,
          /* taxCalculation : SubTotalFirst */Block.__(1, [15])
        ];
}

function buildOrder(items, discounts) {
  return /* record */[
          /* id */"test",
          /* customerName */"test",
          /* paid : Some */[/* record */[
              /* subTotal */0,
              /* discount */0,
              /* tax */0,
              /* total */0,
              /* on */0.0,
              /* by */"test",
              /* externalId : None */0,
              /* method : Cash */0
            ]],
          /* returned : None */0,
          /* orderItems */items,
          /* discounts */discounts,
          /* createdOn */0.0,
          /* lastUpdated : None */0,
          /* removed : false */0,
          /* meta */""
        ];
}

function buildDiscount(name, percent) {
  return /* record */[
          /* id */name,
          /* name */name,
          /* percent */percent
        ];
}

var discount10 = /* record */[
  /* id */"test1",
  /* name */"test1",
  /* percent */10
];

var discount15 = /* record */[
  /* id */"test2",
  /* name */"test2",
  /* percent */15
];

var bread_005 = /* taxCalculation : SubTotalFirst */Block.__(1, [15]);

var bread = /* record */[
  /* sku */"test",
  /* name */"bread",
  /* suggestedPrice */10000,
  /* addedOn */0.0,
  /* salePrice */0,
  bread_005
];

var cheese_005 = /* taxCalculation : SubTotalFirst */Block.__(1, [15]);

var cheese = /* record */[
  /* sku */"test",
  /* name */"cheese",
  /* suggestedPrice */5000,
  /* addedOn */0.0,
  /* salePrice */0,
  cheese_005
];

var drink_005 = /* taxCalculation : SubTotalFirst */Block.__(1, [15]);

var drink = /* record */[
  /* sku */"test",
  /* name */"drink",
  /* suggestedPrice */2000,
  /* addedOn */0.0,
  /* salePrice */0,
  drink_005
];

describe("The discount group functions", (function () {
        describe("when converting a list of orders to a list of discounts", (function () {
                describe("where the order has one discount", (function () {
                        var order = buildOrder(/* :: */[
                              cheese,
                              /* :: */[
                                bread,
                                /* :: */[
                                  drink,
                                  /* [] */0
                                ]
                              ]
                            ], /* :: */[
                              discount10,
                              /* [] */0
                            ]);
                        var discounts = DiscountGroup.fromOrder(order);
                        return Jest.test("it should aggregate the discounts from the orders into one group", (function () {
                                      return Jest.Expect[/* toEqual */12](/* :: */[
                                                  /* record */[
                                                    /* id */"test1",
                                                    /* name */"test1",
                                                    /* percent */10,
                                                    /* amount */1700
                                                  ],
                                                  /* [] */0
                                                ], Jest.Expect[/* expect */0](discounts));
                                    }));
                      }));
                describe("where the order has two discounts", (function () {
                        var orders_000 = buildOrder(/* :: */[
                              cheese,
                              /* :: */[
                                bread,
                                /* :: */[
                                  drink,
                                  /* [] */0
                                ]
                              ]
                            ], /* :: */[
                              discount10,
                              /* :: */[
                                discount10,
                                /* [] */0
                              ]
                            ]);
                        var orders = /* :: */[
                          orders_000,
                          /* [] */0
                        ];
                        var discounts = DiscountGroup.fromOrders(orders);
                        return Jest.test("it should aggregate the discounts from the orders into one group", (function () {
                                      return Jest.Expect[/* toEqual */12](/* :: */[
                                                  /* record */[
                                                    /* id */"test1",
                                                    /* name */"test1",
                                                    /* percent */10,
                                                    /* amount */3400
                                                  ],
                                                  /* [] */0
                                                ], Jest.Expect[/* expect */0](discounts));
                                    }));
                      }));
                describe("where the order has various discounts", (function () {
                        var orders_000 = buildOrder(/* :: */[
                              cheese,
                              /* :: */[
                                bread,
                                /* :: */[
                                  drink,
                                  /* [] */0
                                ]
                              ]
                            ], /* :: */[
                              discount10,
                              /* :: */[
                                discount10,
                                /* :: */[
                                  discount15,
                                  /* [] */0
                                ]
                              ]
                            ]);
                        var orders = /* :: */[
                          orders_000,
                          /* [] */0
                        ];
                        var discounts = DiscountGroup.fromOrders(orders);
                        return Jest.test("it should aggregate the discounts from the orders into one group", (function () {
                                      return Jest.Expect[/* toEqual */12](/* :: */[
                                                  /* record */[
                                                    /* id */"test1",
                                                    /* name */"test1",
                                                    /* percent */10,
                                                    /* amount */3400
                                                  ],
                                                  /* :: */[
                                                    /* record */[
                                                      /* id */"test2",
                                                      /* name */"test2",
                                                      /* percent */15,
                                                      /* amount */2550
                                                    ],
                                                    /* [] */0
                                                  ]
                                                ], Jest.Expect[/* expect */0](discounts));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

exports.buildOrderItem = buildOrderItem;
exports.buildOrder = buildOrder;
exports.buildDiscount = buildDiscount;
exports.discount10 = discount10;
exports.discount15 = discount15;
exports.bread = bread;
exports.cheese = cheese;
exports.drink = drink;
/*  Not a pure module */
