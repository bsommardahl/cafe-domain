// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("bs-jest/lib/js/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var OrderItemCalculation = require("./OrderItemCalculation.js");

function buildOrderItem(price, taxMethod) {
  return /* record */[
          /* sku */"t",
          /* name */"t",
          /* suggestedPrice */price,
          /* addedOn */0.0,
          /* salePrice */0,
          /* taxCalculation */taxMethod
        ];
}

describe("order item calculation", (function () {
        describe("when calculating totals for an entire order", (function () {
                describe("with several items", (function () {
                        return Jest.test("the tax and the subtotal should equal the total", (function () {
                                      var totals = OrderItemCalculation.getTotals(/* [] */0, /* :: */[
                                            /* record */[
                                              /* sku */"PizzaPep",
                                              /* name */"Pizza Peperoni",
                                              /* suggestedPrice */20000,
                                              /* addedOn */1.1,
                                              /* salePrice */20000,
                                              /* taxCalculation : TotalFirst */Block.__(0, [15])
                                            ],
                                            /* :: */[
                                              /* record */[
                                                /* sku */"PizzaCheese",
                                                /* name */"Pizza Queso",
                                                /* suggestedPrice */20000,
                                                /* addedOn */1.1,
                                                /* salePrice */20000,
                                                /* taxCalculation : TotalFirst */Block.__(0, [15])
                                              ],
                                              /* :: */[
                                                /* record */[
                                                  /* sku */"PizzaAloha",
                                                  /* name */"Pizza Aloja",
                                                  /* suggestedPrice */20000,
                                                  /* addedOn */1.1,
                                                  /* salePrice */20000,
                                                  /* taxCalculation : TotalFirst */Block.__(0, [15])
                                                ],
                                                /* [] */0
                                              ]
                                            ]
                                          ]);
                                      Jest.Expect[/* toEqual */12](52173, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                                      Jest.Expect[/* toEqual */12](7827, Jest.Expect[/* expect */0](totals[/* tax */1]));
                                      return Jest.Expect[/* toEqual */12](totals[/* total */2], Jest.Expect[/* expect */0](totals[/* subTotal */0] + totals[/* tax */1] | 0));
                                    }));
                      }));
                describe("with several items and a discount", (function () {
                        var totals = OrderItemCalculation.getTotals(/* :: */[
                              /* record */[
                                /* id */"test",
                                /* name */"test",
                                /* percent */10
                              ],
                              /* [] */0
                            ], /* :: */[
                              /* record */[
                                /* sku */"PizzaPep",
                                /* name */"Pizza Peperoni",
                                /* suggestedPrice */20000,
                                /* addedOn */1.1,
                                /* salePrice */20000,
                                /* taxCalculation : TotalFirst */Block.__(0, [15])
                              ],
                              /* :: */[
                                /* record */[
                                  /* sku */"PizzaCheese",
                                  /* name */"Pizza Queso",
                                  /* suggestedPrice */20000,
                                  /* addedOn */1.1,
                                  /* salePrice */20000,
                                  /* taxCalculation : SubTotalFirst */Block.__(1, [15])
                                ],
                                /* :: */[
                                  /* record */[
                                    /* sku */"PizzaAloha",
                                    /* name */"Pizza Aloja",
                                    /* suggestedPrice */20000,
                                    /* addedOn */1.1,
                                    /* salePrice */20000,
                                    /* taxCalculation : Exempt */0
                                  ],
                                  /* [] */0
                                ]
                              ]
                            ]);
                        Jest.test("the discount should be 10% of the subtotal", (function () {
                                return Jest.Expect[/* toEqual */12](6000, Jest.Expect[/* expect */0](totals[/* discounts */3]));
                              }));
                        Jest.test("the discount should be applied to the subtotal", (function () {
                                return Jest.Expect[/* toEqual */12](51652, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                              }));
                        Jest.test("the the tax should be calcualted per item and then rounded", (function () {
                                return Jest.Expect[/* toEqual */12](5048, Jest.Expect[/* expect */0](totals[/* tax */1]));
                              }));
                        return Jest.test("the total should be the sum of all other subtotals", (function () {
                                      return Jest.Expect[/* toEqual */12](56700, Jest.Expect[/* expect */0](totals[/* total */2]));
                                    }));
                      }));
                describe("with one pizza and a discount", (function () {
                        var totals = OrderItemCalculation.getTotals(/* :: */[
                              /* record */[
                                /* id */"test",
                                /* name */"test",
                                /* percent */25
                              ],
                              /* [] */0
                            ], /* :: */[
                              /* record */[
                                /* sku */"PizzaCheese",
                                /* name */"Pizza Queso",
                                /* suggestedPrice */12500,
                                /* addedOn */1.1,
                                /* salePrice */0,
                                /* taxCalculation : TotalFirst */Block.__(0, [15])
                              ],
                              /* [] */0
                            ]);
                        Jest.test("the discount should be 25% of the subtotal", (function () {
                                return Jest.Expect[/* toEqual */12](3125, Jest.Expect[/* expect */0](totals[/* discounts */3]));
                              }));
                        Jest.test("the discount should be applied to the subtotal", (function () {
                                return Jest.Expect[/* toEqual */12](8152, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                              }));
                        Jest.test("the the tax should be calcualted per item and then rounded", (function () {
                                return Jest.Expect[/* toEqual */12](1223, Jest.Expect[/* expect */0](totals[/* tax */1]));
                              }));
                        return Jest.test("the total should be the sum of all other subtotals", (function () {
                                      return Jest.Expect[/* toEqual */12](9375, Jest.Expect[/* expect */0](totals[/* total */2]));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("with weird numbers and two discounts", (function () {
                var discounts_000 = /* record */[
                  /* id */"test",
                  /* name */"test",
                  /* percent */33
                ];
                var discounts_001 = /* :: */[
                  /* record */[
                    /* id */"test",
                    /* name */"test",
                    /* percent */25
                  ],
                  /* [] */0
                ];
                var discounts = /* :: */[
                  discounts_000,
                  discounts_001
                ];
                var orderItem1 = buildOrderItem(-475360381, /* TotalFirst */Block.__(0, [123]));
                var orderItem2 = buildOrderItem(1828920855, /* SubTotalFirst */Block.__(1, [187]));
                var orderItem3 = buildOrderItem(714835292, /* Exempt */0);
                var orderItems_001 = /* :: */[
                  orderItem2,
                  /* :: */[
                    orderItem3,
                    /* [] */0
                  ]
                ];
                var orderItems = /* :: */[
                  orderItem1,
                  orderItems_001
                ];
                var expectedTotals_000 = OrderItemCalculation.totalFirstCalculator(123, discounts, orderItem1);
                var expectedTotals_001 = /* :: */[
                  OrderItemCalculation.subTotalFirstCalculator(187, discounts, orderItem2),
                  /* :: */[
                    OrderItemCalculation.exemptCalculator(0, discounts, orderItem3),
                    /* [] */0
                  ]
                ];
                var expectedTotals = /* :: */[
                  expectedTotals_000,
                  expectedTotals_001
                ];
                var discount = Math.round(Belt_List.reduce(expectedTotals, 0.0, (function (acc, tot) {
                            return acc + tot[/* discounts */3] * 100;
                          }))) | 0;
                var subTotal = Math.round(Belt_List.reduce(expectedTotals, 0.0, (function (acc, tot) {
                            return acc + tot[/* subTotal */0] * 100;
                          }))) | 0;
                var taxes = Math.round(Belt_List.reduce(expectedTotals, 0.0, (function (acc, tot) {
                            return acc + tot[/* tax */1] * 100;
                          }))) | 0;
                var totals = OrderItemCalculation.getTotals(discounts, orderItems);
                Jest.test("the discount should be 16% of the subtotal", (function () {
                        return Jest.Expect[/* toEqual */12](discount, Jest.Expect[/* expect */0](totals[/* discounts */3]));
                      }));
                Jest.test("the subtotal should be the sum of the discounted subtotals", (function () {
                        return Jest.Expect[/* toEqual */12](subTotal, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                      }));
                Jest.test("the the tax should be equal the sum of thr tax for each item", (function () {
                        return Jest.Expect[/* toEqual */12](taxes, Jest.Expect[/* expect */0](totals[/* tax */1]));
                      }));
                return Jest.test("the total should be the sum of all other subtotals", (function () {
                              return Jest.Expect[/* toEqual */12](subTotal + taxes | 0, Jest.Expect[/* expect */0](totals[/* total */2]));
                            }));
              }));
        describe("when calculating order item totals", (function () {
                describe("when exempt tax calculation", (function () {
                        describe("and with a discount", (function () {
                                var totals = OrderItemCalculation.exemptCalculator(0, /* :: */[
                                      /* record */[
                                        /* id */"id",
                                        /* name */"name",
                                        /* percent */10
                                      ],
                                      /* [] */0
                                    ], /* record */[
                                      /* sku */"some",
                                      /* name */"some",
                                      /* suggestedPrice */1000,
                                      /* addedOn */0.0,
                                      /* salePrice */1000,
                                      /* taxCalculation : Exempt */0
                                    ]);
                                Jest.test("the subtotal should be 900", (function () {
                                        return Jest.Expect[/* toEqual */12](9, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                                      }));
                                Jest.test("the total should be equal to the subtotal", (function () {
                                        return Jest.Expect[/* toEqual */12](totals[/* total */2], Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                                      }));
                                Jest.test("it should have a 100 lemp discount", (function () {
                                        return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](totals[/* discounts */3]));
                                      }));
                                return Jest.test("it should return zero tax", (function () {
                                              return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](totals[/* tax */1]));
                                            }));
                              }));
                        describe("and with no discounts", (function () {
                                var totals = OrderItemCalculation.exemptCalculator(0, /* [] */0, /* record */[
                                      /* sku */"some",
                                      /* name */"some",
                                      /* suggestedPrice */100,
                                      /* addedOn */0.0,
                                      /* salePrice */100,
                                      /* taxCalculation : Exempt */0
                                    ]);
                                Jest.test("the subtotal should be the sale price", (function () {
                                        return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                                      }));
                                Jest.test("the total should be equal to the subtotal", (function () {
                                        return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](totals[/* total */2]));
                                      }));
                                Jest.test("it should have a 0 discount", (function () {
                                        return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](totals[/* discounts */3]));
                                      }));
                                return Jest.test("it should return zero tax", (function () {
                                              return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](totals[/* tax */1]));
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("with total first tax calculation", (function () {
                        describe("and no discount", (function () {
                                var totals = OrderItemCalculation.totalFirstCalculator(15, /* [] */0, /* record */[
                                      /* sku */"some",
                                      /* name */"some",
                                      /* suggestedPrice */100,
                                      /* addedOn */0.0,
                                      /* salePrice */100,
                                      /* taxCalculation : TotalFirst */Block.__(0, [15])
                                    ]);
                                Jest.test("the total should the suggested price", (function () {
                                        return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](totals[/* total */2]));
                                      }));
                                Jest.test("the tax should be inverted from total", (function () {
                                        return Jest.Expect[/* toEqual */12](0.13043478260869557, Jest.Expect[/* expect */0](totals[/* tax */1]));
                                      }));
                                Jest.test("the subtotal derrived from the total minus the tax amount", (function () {
                                        return Jest.Expect[/* toEqual */12](0.8695652173913044, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                                      }));
                                return Jest.test("it should not have a discount", (function () {
                                              return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](totals[/* discounts */3]));
                                            }));
                              }));
                        describe("and with a low discount", (function () {
                                var totals = OrderItemCalculation.totalFirstCalculator(15, /* :: */[
                                      /* record */[
                                        /* id */"id",
                                        /* name */"name",
                                        /* percent */10
                                      ],
                                      /* [] */0
                                    ], /* record */[
                                      /* sku */"some",
                                      /* name */"some",
                                      /* suggestedPrice */1100,
                                      /* addedOn */0.0,
                                      /* salePrice */0,
                                      /* taxCalculation : TotalFirst */Block.__(0, [15])
                                    ]);
                                Jest.test("the subtotal should be discounted and derrived from the total", (function () {
                                        return Jest.Expect[/* toEqual */12](8.608695652173914, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                                      }));
                                Jest.test("the total should be the discounted suggested price", (function () {
                                        return Jest.Expect[/* toEqual */12](9.9, Jest.Expect[/* expect */0](totals[/* total */2]));
                                      }));
                                Jest.test("it should have a discount", (function () {
                                        return Jest.Expect[/* toEqual */12](1.1, Jest.Expect[/* expect */0](totals[/* discounts */3]));
                                      }));
                                return Jest.test("it should return tax", (function () {
                                              return Jest.Expect[/* toEqual */12](1.2913043478260864, Jest.Expect[/* expect */0](totals[/* tax */1]));
                                            }));
                              }));
                        describe("and with a 100% discount", (function () {
                                var totals = OrderItemCalculation.totalFirstCalculator(15, /* :: */[
                                      /* record */[
                                        /* id */"id",
                                        /* name */"name",
                                        /* percent */100
                                      ],
                                      /* [] */0
                                    ], /* record */[
                                      /* sku */"some",
                                      /* name */"free",
                                      /* suggestedPrice */1000,
                                      /* addedOn */0.0,
                                      /* salePrice */0,
                                      /* taxCalculation : TotalFirst */Block.__(0, [15])
                                    ]);
                                Jest.test("the subtotal should be zero", (function () {
                                        return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                                      }));
                                Jest.test("the total should be zero", (function () {
                                        return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](totals[/* total */2]));
                                      }));
                                Jest.test("the discount should be the same as the suggested price", (function () {
                                        return Jest.Expect[/* toEqual */12](10, Jest.Expect[/* expect */0](totals[/* discounts */3]));
                                      }));
                                return Jest.test("the tax should be zero", (function () {
                                              return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](totals[/* tax */1]));
                                            }));
                              }));
                        return /* () */0;
                      }));
                describe("and with a 95% discount", (function () {
                        var totals = OrderItemCalculation.totalFirstCalculator(15, /* :: */[
                              /* record */[
                                /* id */"id",
                                /* name */"name",
                                /* percent */95
                              ],
                              /* [] */0
                            ], /* record */[
                              /* sku */"some",
                              /* name */"almost free",
                              /* suggestedPrice */10000,
                              /* addedOn */0.0,
                              /* salePrice */0,
                              /* taxCalculation : TotalFirst */Block.__(0, [15])
                            ]);
                        Jest.test("the subtotal should be less than the total", (function () {
                                return Jest.Expect[/* toEqual */12](4.347826086956522, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                              }));
                        Jest.test("the total should be only 5% of the original sales price", (function () {
                                return Jest.Expect[/* toEqual */12](5, Jest.Expect[/* expect */0](totals[/* total */2]));
                              }));
                        Jest.test("the discount should be 95%", (function () {
                                return Jest.Expect[/* toEqual */12](95, Jest.Expect[/* expect */0](totals[/* discounts */3]));
                              }));
                        return Jest.test("the tax should be from the 5% subtotal", (function () {
                                      return Jest.Expect[/* toEqual */12](0.6521739130434776, Jest.Expect[/* expect */0](totals[/* tax */1]));
                                    }));
                      }));
                describe("when discounting back down to normal price", (function () {
                        var totals = OrderItemCalculation.totalFirstCalculator(15, /* :: */[
                              /* record */[
                                /* id */"id",
                                /* name */"name",
                                /* percent */25
                              ],
                              /* [] */0
                            ], /* record */[
                              /* sku */"some",
                              /* name */"local discount target",
                              /* suggestedPrice */130,
                              /* addedOn */0.0,
                              /* salePrice */0,
                              /* taxCalculation : TotalFirst */Block.__(0, [15])
                            ]);
                        return Jest.test("the total should be the normal price", (function () {
                                      return Jest.Expect[/* toEqual */12](0.9750000000000001, Jest.Expect[/* expect */0](totals[/* total */2]));
                                    }));
                      }));
                describe("with subtotal first tax calculation", (function () {
                        describe("with no discount", (function () {
                                var totals = OrderItemCalculation.subTotalFirstCalculator(15, /* [] */0, /* record */[
                                      /* sku */"some",
                                      /* name */"some",
                                      /* suggestedPrice */100,
                                      /* addedOn */0.0,
                                      /* salePrice */100,
                                      /* taxCalculation : TotalFirst */Block.__(0, [15])
                                    ]);
                                Jest.test("the subtotal should be the suggested price", (function () {
                                        return Jest.Expect[/* toEqual */12](1, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                                      }));
                                Jest.test("the tax should be multiplied from the subtotal", (function () {
                                        return Jest.Expect[/* toEqual */12](0.15, Jest.Expect[/* expect */0](totals[/* tax */1]));
                                      }));
                                Jest.test("the total should the sum of the subtotal and the tax", (function () {
                                        return Jest.Expect[/* toEqual */12](1.15, Jest.Expect[/* expect */0](totals[/* total */2]));
                                      }));
                                return Jest.test("it should not have a discount", (function () {
                                              return Jest.Expect[/* toEqual */12](0, Jest.Expect[/* expect */0](totals[/* discounts */3]));
                                            }));
                              }));
                        describe("with one discount", (function () {
                                var totals = OrderItemCalculation.subTotalFirstCalculator(15, /* :: */[
                                      /* record */[
                                        /* id */"id",
                                        /* name */"name",
                                        /* percent */10
                                      ],
                                      /* [] */0
                                    ], /* record */[
                                      /* sku */"some",
                                      /* name */"some",
                                      /* suggestedPrice */1036,
                                      /* addedOn */0.0,
                                      /* salePrice */0,
                                      /* taxCalculation : TotalFirst */Block.__(0, [15])
                                    ]);
                                Jest.test("the subtotal should be the discounted suggested price", (function () {
                                        return Jest.Expect[/* toEqual */12](9.324, Jest.Expect[/* expect */0](totals[/* subTotal */0]));
                                      }));
                                Jest.test("the total should be equal the subtotal + tax", (function () {
                                        return Jest.Expect[/* toEqual */12](10.7226, Jest.Expect[/* expect */0](totals[/* total */2]));
                                      }));
                                Jest.test("it should have a discount", (function () {
                                        return Jest.Expect[/* toEqual */12](1.036, Jest.Expect[/* expect */0](totals[/* discounts */3]));
                                      }));
                                return Jest.test("it should return tax", (function () {
                                              return Jest.Expect[/* toEqual */12](1.3985999999999998, Jest.Expect[/* expect */0](totals[/* tax */1]));
                                            }));
                              }));
                        return /* () */0;
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

exports.buildOrderItem = buildOrderItem;
/*  Not a pure module */
