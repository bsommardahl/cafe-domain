// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function now() {
  return Date.now();
}

function toDisplayDate(t) {
  var d = new Date(t);
  var month = d.getMonth() + 1;
  var day = d.getDate();
  var year = d.getFullYear();
  return String(day | 0) + ("-" + (String(month | 0) + ("-" + String(year | 0))));
}

function toStringWith2Digits(s) {
  if (s === 0) {
    return "00";
  } else if (s < 10) {
    return "0" + String(s);
  } else {
    return String(s);
  }
}

function toISODate(t) {
  var d = new Date(t);
  var month = d.getMonth() + 1;
  var day = d.getDate();
  var year = d.getFullYear();
  return "" + (String(year | 0) + ("-" + (toStringWith2Digits(month | 0) + ("-" + toStringWith2Digits(day | 0)))));
}

function fromISODate(iso) {
  var p = iso.split("-");
  var d = Caml_array.caml_array_get(p, 1) + ("/" + (Caml_array.caml_array_get(p, 2) + ("/" + Caml_array.caml_array_get(p, 0))));
  var parsed = new Date(d);
  console.log(parsed);
  return parsed.getTime();
}

function toDisplayTime(t) {
  var d = new Date(t);
  var armyHours = d.getHours() | 0;
  var isPm = +(armyHours > 12);
  var hoursPossibleZero = isPm !== 0 ? armyHours - 12 | 0 : armyHours;
  var match = +(hoursPossibleZero === 0);
  var hours = match !== 0 ? 12 : hoursPossibleZero;
  var minutes = d.getMinutes() | 0;
  var ampm = isPm !== 0 ? "PM" : "AM";
  return String(hours) + (":" + (toStringWith2Digits(minutes) + (" " + ampm)));
}

function toDisplay(t) {
  return toDisplayDate(t) + (" " + toDisplayTime(t));
}

function fromDisplay(f) {
  var p = f.split(" ");
  var d_es = Caml_array.caml_array_get(p, 0);
  var d_es_p = d_es.split("-");
  var month = Caml_format.caml_float_of_string(Caml_array.caml_array_get(d_es_p, 1)) - 1;
  var day = Caml_format.caml_float_of_string(Caml_array.caml_array_get(d_es_p, 0));
  var year = Caml_format.caml_float_of_string(Caml_array.caml_array_get(d_es_p, 2));
  var t_p = Caml_array.caml_array_get(p, 1).split(":");
  var ampm = Caml_array.caml_array_get(p, 2);
  var match = +(ampm === "PM");
  var hours = Caml_format.caml_float_of_string(Caml_array.caml_array_get(t_p, 0)) + (
    match !== 0 ? 12 : 0
  );
  var minutes = Caml_format.caml_float_of_string(Caml_array.caml_array_get(t_p, 1));
  return new Date(new Date().setFullYear(year, month, day)).setHours(hours, minutes, 0, 0);
}

function oneMonthBefore(t) {
  return t - 86400000.0 * 30.44;
}

function addDays(d, t) {
  return t + 86400000.0 * d;
}

function startOfDay(d) {
  var jsDate = new Date(d);
  jsDate.setHours(0, 0, 0);
  return jsDate.getTime();
}

function endOfDay(d) {
  var jsDate = new Date(d);
  jsDate.setHours(23, 59, 59);
  return jsDate.getTime();
}

function isValid(formattedDate) {
  var valid = new Date(formattedDate);
  var match = valid.toString();
  if (match === "Invalid Date") {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

var day = 86400000.0;

var toShortTime = toDisplayTime;

exports.now = now;
exports.day = day;
exports.toDisplayDate = toDisplayDate;
exports.toStringWith2Digits = toStringWith2Digits;
exports.toISODate = toISODate;
exports.fromISODate = fromISODate;
exports.toDisplayTime = toDisplayTime;
exports.toShortTime = toShortTime;
exports.toDisplay = toDisplay;
exports.fromDisplay = fromDisplay;
exports.oneMonthBefore = oneMonthBefore;
exports.addDays = addDays;
exports.startOfDay = startOfDay;
exports.endOfDay = endOfDay;
exports.isValid = isValid;
/* No side effect */
