// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("bs-jest/lib/js/src/jest.js");
var Util = require("./Util.js");

describe("util functions", (function () {
        describe("when stripping of leading zeros", (function () {
                describe("with non zero numbers", (function () {
                        return Jest.test("it should remove only the leading zeros", (function () {
                                      return Jest.Expect[/* toEqual */12]("31", Jest.Expect[/* expect */0](Util.stripLeadingZeros("0031")));
                                    }));
                      }));
                describe("with only zeros", (function () {
                        return Jest.test("it should leave an empty string", (function () {
                                      return Jest.Expect[/* toEqual */12]("", Jest.Expect[/* expect */0](Util.stripLeadingZeros("000")));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("querystring parsing", (function () {
                Jest.test("with keys and values", (function () {
                        var result = Util.QueryParam[/* get */0]("theKey", "something=else&theKey=dog");
                        return Jest.Expect[/* toEqual */12](/* Some */["dog"], Jest.Expect[/* expect */0](result));
                      }));
                Jest.test("an empty value should represent none", (function () {
                        var result = Util.QueryParam[/* get */0]("theKey", "theKey=");
                        return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](result));
                      }));
                return Jest.test("a nonexistent key represent none", (function () {
                              var result = Util.QueryParam[/* get */0]("theKey", "");
                              return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](result));
                            }));
              }));
        return /* () */0;
      }));

/*  Not a pure module */
