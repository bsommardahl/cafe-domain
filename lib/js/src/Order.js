// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Paid = require("./Paid.js");
var $$Array = require("bs-platform/lib/js/array.js");
var JsUtils = require("./JsUtils.js");
var Discount = require("./Discount.js");
var OrderItem = require("./OrderItem.js");

function mapOrderFromJs(orderJs) {
  var match = orderJs.paid;
  var match$1 = orderJs.orderItems;
  var match$2 = orderJs.discounts;
  return /* record */[
          /* id */orderJs._id,
          /* customerName */orderJs.customerName,
          /* paid */(match == null) ? /* None */0 : /* Some */[Paid.fromJs(match)],
          /* orderItems */(match$1 == null) ? /* [] */0 : $$Array.to_list($$Array.map(OrderItem.mapOrderItemFromJs, match$1)),
          /* discounts */(match$2 == null) ? /* [] */0 : $$Array.to_list($$Array.map(Discount.mapFromJs, match$2)),
          /* createdOn */JsUtils.convertDate(orderJs.createdOn),
          /* lastUpdated */JsUtils.convertFloatOption(orderJs.lastUpdated),
          /* removed : false */0
        ];
}

function vmFromExistingOrder(o) {
  return /* record */[
          /* id : Some */[o[/* id */0]],
          /* customerName */o[/* customerName */1],
          /* orderItems */o[/* orderItems */3],
          /* discounts */o[/* discounts */4],
          /* paid */o[/* paid */2],
          /* createdOn */o[/* createdOn */5],
          /* lastUpdated */o[/* lastUpdated */6],
          /* removed : false */0
        ];
}

function vmToUpdateOrder(vm) {
  var match = vm[/* id */0];
  return /* record */[
          /* id */match ? match[0] : "",
          /* customerName */vm[/* customerName */1],
          /* orderItems */vm[/* orderItems */2],
          /* discounts */vm[/* discounts */3],
          /* paid */vm[/* paid */4]
        ];
}

function updateOrderToJs(id, rev, originalOrder, updateOrder) {
  var match = updateOrder[/* paid */4];
  return {
          _id: id,
          _rev: rev,
          orderItems: $$Array.of_list(List.map(OrderItem.orderItemToJs, updateOrder[/* orderItems */2])),
          customerName: updateOrder[/* customerName */1],
          lastUpdated: Date.now(),
          discounts: $$Array.of_list(List.map(Discount.mapToJs, updateOrder[/* discounts */3])),
          paid: match ? Paid.toJs(match[0]) : undefined,
          createdOn: originalOrder[/* createdOn */5]
        };
}

function toJs(order) {
  var match = order[/* paid */2];
  return {
          _id: order[/* id */0],
          orderItems: $$Array.of_list(List.map(OrderItem.orderItemToJs, order[/* orderItems */3])),
          customerName: order[/* customerName */1],
          lastUpdated: Date.now(),
          discounts: $$Array.of_list(List.map(Discount.mapToJs, order[/* discounts */4])),
          paid: match ? Paid.toJs(match[0]) : undefined,
          createdOn: order[/* createdOn */5]
        };
}

function newOrderToJs(order) {
  var match = order[/* paid */3];
  return {
          customerName: order[/* customerName */0],
          orderItems: $$Array.of_list(List.map(OrderItem.orderItemToJs, order[/* orderItems */1])),
          discounts: $$Array.of_list(List.map(Discount.mapToJs, order[/* discounts */2])),
          createdOn: Date.now(),
          paid: match ? Paid.toJs(match[0]) : undefined
        };
}

exports.mapOrderFromJs = mapOrderFromJs;
exports.vmFromExistingOrder = vmFromExistingOrder;
exports.vmToUpdateOrder = vmToUpdateOrder;
exports.updateOrderToJs = updateOrderToJs;
exports.toJs = toJs;
exports.newOrderToJs = newOrderToJs;
/* No side effect */
