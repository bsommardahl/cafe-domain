// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var $$Date = require("./Date.js");
var List = require("bs-platform/lib/js/list.js");
var Paid = require("./Paid.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Return = require("./Return.js");
var JsUtils = require("./JsUtils.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Discount = require("./Discount.js");
var OrderItem = require("./OrderItem.js");

var fromJsToDict = Js_dict.fromArray;

var toJsFromDict = Js_dict.entries;

function mapOrderFromJs(orderJs) {
  var match = orderJs.paid;
  var match$1 = orderJs.returned;
  var match$2 = orderJs.orderItems;
  var match$3 = orderJs.discounts;
  return /* record */[
          /* id */orderJs._id,
          /* customerName */orderJs.customerName,
          /* paid */(match == null) ? /* None */0 : /* Some */[Paid.fromJs(match)],
          /* returned */(match$1 == null) ? /* None */0 : /* Some */[Return.fromJs(match$1)],
          /* orderItems */(match$2 == null) ? /* [] */0 : $$Array.to_list($$Array.map(OrderItem.mapOrderItemFromJs, match$2)),
          /* discounts */(match$3 == null) ? /* [] */0 : $$Array.to_list($$Array.map(Discount.mapFromJs, match$3)),
          /* createdOn */JsUtils.convertDate(orderJs.createdOn),
          /* lastUpdated */JsUtils.convertFloatOption(orderJs.lastUpdated),
          /* removed : false */0,
          /* meta */Js_dict.fromArray(orderJs.meta)
        ];
}

function toVm(o) {
  var id = o[/* id */0];
  var tmp = id === "" ? /* None */0 : /* Some */[id];
  return /* record */[
          /* id */tmp,
          /* customerName */o[/* customerName */1],
          /* orderItems */o[/* orderItems */4],
          /* discounts */o[/* discounts */5],
          /* paid */o[/* paid */2],
          /* returned */o[/* returned */3],
          /* createdOn */o[/* createdOn */6],
          /* lastUpdated */o[/* lastUpdated */7],
          /* removed : false */0,
          /* meta */o[/* meta */9]
        ];
}

function fromVm(o) {
  var match = o[/* id */0];
  return /* record */[
          /* id */match ? match[0] : "",
          /* customerName */o[/* customerName */1],
          /* paid */o[/* paid */4],
          /* returned */o[/* returned */5],
          /* orderItems */o[/* orderItems */2],
          /* discounts */o[/* discounts */3],
          /* createdOn */o[/* createdOn */6],
          /* lastUpdated */o[/* lastUpdated */7],
          /* removed : false */0,
          /* meta */o[/* meta */9]
        ];
}

function vmToUpdateOrder(vm) {
  var match = vm[/* id */0];
  return /* record */[
          /* id */match ? match[0] : "",
          /* customerName */vm[/* customerName */1],
          /* orderItems */vm[/* orderItems */2],
          /* discounts */vm[/* discounts */3],
          /* returned */vm[/* returned */5],
          /* paid */vm[/* paid */4],
          /* meta */vm[/* meta */9]
        ];
}

function updateOrderToJs(id, rev, originalOrder, updateOrder) {
  var match = updateOrder[/* paid */5];
  var match$1 = updateOrder[/* returned */4];
  return {
          _id: id,
          _rev: rev,
          orderItems: $$Array.of_list(List.map(OrderItem.orderItemToJs, updateOrder[/* orderItems */2])),
          customerName: updateOrder[/* customerName */1],
          lastUpdated: Date.now(),
          discounts: $$Array.of_list(List.map(Discount.mapToJs, updateOrder[/* discounts */3])),
          paid: match ? Paid.toJs(match[0]) : undefined,
          returned: match$1 ? Return.toJs(match$1[0]) : undefined,
          meta: Js_dict.entries(originalOrder[/* meta */9]),
          createdOn: originalOrder[/* createdOn */6]
        };
}

function toJs(order) {
  var match = order[/* paid */2];
  var match$1 = order[/* returned */3];
  return {
          _id: order[/* id */0],
          orderItems: $$Array.of_list(List.map(OrderItem.orderItemToJs, order[/* orderItems */4])),
          customerName: order[/* customerName */1],
          lastUpdated: Date.now(),
          discounts: $$Array.of_list(List.map(Discount.mapToJs, order[/* discounts */5])),
          paid: match ? Paid.toJs(match[0]) : undefined,
          returned: match$1 ? Return.toJs(match$1[0]) : undefined,
          meta: Js_dict.entries(order[/* meta */9]),
          createdOn: order[/* createdOn */6]
        };
}

function newOrderToJs(order) {
  var match = order[/* paid */3];
  return {
          customerName: order[/* customerName */0],
          orderItems: $$Array.of_list(List.map(OrderItem.orderItemToJs, order[/* orderItems */1])),
          discounts: $$Array.of_list(List.map(Discount.mapToJs, order[/* discounts */2])),
          createdOn: $$Date.now(/* () */0),
          paid: match ? Paid.toJs(match[0]) : undefined
        };
}

var vmFromExistingOrder = toVm;

exports.fromJsToDict = fromJsToDict;
exports.toJsFromDict = toJsFromDict;
exports.mapOrderFromJs = mapOrderFromJs;
exports.toVm = toVm;
exports.vmFromExistingOrder = vmFromExistingOrder;
exports.fromVm = fromVm;
exports.vmToUpdateOrder = vmToUpdateOrder;
exports.updateOrderToJs = updateOrderToJs;
exports.toJs = toJs;
exports.newOrderToJs = newOrderToJs;
/* Js_dict Not a pure module */
