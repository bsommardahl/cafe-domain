// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function toTaxRate(method_) {
  if (typeof method_ === "number") {
    return 0;
  } else {
    return method_[0];
  }
}

function toDelimitedString(meth) {
  if (typeof meth === "number") {
    return "exempt|";
  } else if (meth.tag) {
    return "subTotalFirst|" + String(meth[0]);
  } else {
    return "totalFirst|" + String(meth[0]);
  }
}

function toMethod(str) {
  var match = List.map((function (s) {
          return s.toLocaleLowerCase();
        }), List.filter((function (s) {
                return +(s !== "");
              }))($$Array.to_list(str.split("|"))));
  if (match) {
    switch (match[0]) {
      case "subtotalfirst" : 
          var match$1 = match[1];
          if (match$1 && !match$1[1]) {
            return /* SubTotalFirst */Block.__(1, [Caml_format.caml_int_of_string(match$1[0])]);
          } else {
            return /* Exempt */0;
          }
      case "totalfirst" : 
          var match$2 = match[1];
          if (match$2 && !match$2[1]) {
            return /* TotalFirst */Block.__(0, [Caml_format.caml_int_of_string(match$2[0])]);
          } else {
            return /* Exempt */0;
          }
      default:
        return /* Exempt */0;
    }
  } else {
    return /* Exempt */0;
  }
}

var Calculation = /* module */[
  /* toDelimitedString */toDelimitedString,
  /* toMethod */toMethod
];

exports.toTaxRate = toTaxRate;
exports.Calculation = Calculation;
/* No side effect */
