// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Vendor = require("./Vendor.js");
var Percent = require("./Percent.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var ExpenseType = require("./ExpenseType.js");

function fromJs(js) {
  return /* record */[
          /* amount */js.amount,
          /* taxRate */js.taxRate
        ];
}

function toJs(item) {
  return {
          amount: item[/* amount */0],
          taxRate: item[/* taxRate */1]
        };
}

var SubTotal = /* module */[
  /* fromJs */fromJs,
  /* toJs */toJs
];

function denormalize(expenses) {
  return List.concat(List.map((function (e) {
                    return List.map((function (s) {
                                  return /* record */[
                                          /* description */e[/* description */1],
                                          /* vendor */e[/* vendor */2],
                                          /* expenseType */e[/* expenseType */3],
                                          /* date */e[/* date */4],
                                          /* subTotal */s[/* amount */0],
                                          /* taxRate */s[/* taxRate */1],
                                          /* tax */Percent.calculate(s[/* taxRate */1], s[/* amount */0]),
                                          /* total */Percent.calculate(s[/* taxRate */1], s[/* amount */0]) + s[/* amount */0] | 0
                                        ];
                                }), e[/* subTotals */5]);
                  }), expenses));
}

function sum(whatToSum, l) {
  return Belt_List.reduce(l, 0, (function (a, c) {
                return a + Curry._1(whatToSum, c) | 0;
              }));
}

function mapToJs(expense) {
  return {
          description: expense[/* description */0],
          vendor: Vendor.toJs(expense[/* vendor */1]),
          expenseType: ExpenseType.toJs(expense[/* expenseType */2]),
          date: expense[/* date */3],
          subTotals: List.map(toJs, expense[/* subTotals */4]),
          tax: expense[/* tax */5],
          total: expense[/* total */6]
        };
}

var New = /* module */[/* mapToJs */mapToJs];

function fromJs$1(expenseJs) {
  var match = expenseJs.subTotals;
  return /* record */[
          /* id */expenseJs._id,
          /* description */expenseJs.description,
          /* vendor */Vendor.fromJs(expenseJs.vendor),
          /* expenseType */ExpenseType.fromJs(expenseJs.expenseType),
          /* date */expenseJs.date,
          /* subTotals */(match == null) ? /* [] */0 : List.map(fromJs, match),
          /* tax */expenseJs.tax,
          /* total */expenseJs.total
        ];
}

function toJs$1(expense) {
  return {
          _id: expense[/* id */0],
          description: expense[/* description */1],
          vendor: Vendor.toJs(expense[/* vendor */2]),
          expenseType: ExpenseType.toJs(expense[/* expenseType */3]),
          date: expense[/* date */4],
          subTotals: List.map(toJs, expense[/* subTotals */5]),
          tax: expense[/* tax */6],
          total: expense[/* total */7]
        };
}

function toJsWithRev(rev, expense) {
  return {
          _id: expense[/* id */0],
          _rev: rev,
          description: expense[/* description */1],
          vendor: Vendor.toJs(expense[/* vendor */2]),
          expenseType: ExpenseType.toJs(expense[/* expenseType */3]),
          date: expense[/* date */4],
          subTotals: List.map(toJs, expense[/* subTotals */5]),
          tax: expense[/* tax */6],
          total: expense[/* total */7]
        };
}

exports.SubTotal = SubTotal;
exports.denormalize = denormalize;
exports.sum = sum;
exports.New = New;
exports.fromJs = fromJs$1;
exports.toJs = toJs$1;
exports.toJsWithRev = toJsWithRev;
/* No side effect */
