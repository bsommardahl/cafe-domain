// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Group = require("./Group.js");
var Percent = require("./Percent.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function fromSalesList(sales) {
  return List.map((function (x) {
                var sub = Belt_List.reduce(x[/* value */1], 0, (function (acc, cur) {
                        return acc + cur[/* salePrice */1] | 0;
                      }));
                var tax = Belt_List.reduce(x[/* value */1], 0, (function (acc, cur) {
                        return acc + Percent.calculate(cur[/* taxRate */3], cur[/* salePrice */1]) | 0;
                      }));
                var total = sub + tax | 0;
                var firstSale = Caml_array.caml_array_get($$Array.of_list(x[/* value */1]), 0);
                return /* record */[
                        /* sku */firstSale[/* sku */0],
                        /* productName */firstSale[/* productName */2],
                        /* taxRate */firstSale[/* taxRate */3],
                        /* salePrice */firstSale[/* salePrice */1],
                        /* quantity */List.length(x[/* value */1]),
                        /* subTotal */sub,
                        /* tax */tax,
                        /* total */total
                      ];
              }), Group.by((function (x) {
                    return x[/* sku */0] + (String(x[/* salePrice */1]) + String(x[/* taxRate */3]));
                  }), sales));
}

function sum(whatToSum, l) {
  return Belt_List.reduce(l, 0, (function (a, c) {
                return a + Curry._1(whatToSum, c) | 0;
              }));
}

exports.fromSalesList = fromSalesList;
exports.sum = sum;
/* Group Not a pure module */
