// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var $$Date = require("./Date.js");
var Jest = require("bs-jest/lib/js/src/jest.js");

var formatted = "28-3-2018 9:00 PM";

describe("Date functions", (function () {
        describe("when converting from date float to sortable date", (function () {
                describe("and float is a valid date", (function () {
                        return Jest.test("it should return the corresponding date in YYYY-MM-DD format", (function () {
                                      return Jest.Expect[/* toEqual */12]("2018-03-28", Jest.Expect[/* expect */0]($$Date.toISODate(1522292400000)));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("when converting from sortable date to date float", (function () {
                describe("and sortable date is valid", (function () {
                        return Jest.test("it should return the corresponding date", (function () {
                                      return Jest.Expect[/* toEqual */12]($$Date.startOfDay(1522292400000), Jest.Expect[/* expect */0]($$Date.fromISODate($$Date.toISODate(1522292400000))));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("when getting the start of the day", (function () {
                return Jest.test("it should return the corresponding date at midnight", (function () {
                              return Jest.Expect[/* toEqual */12]($$Date.toDisplay(1522216800000), Jest.Expect[/* expect */0]($$Date.toDisplay($$Date.startOfDay(1522292400000))));
                            }));
              }));
        describe("when getting the end of the day", (function () {
                return Jest.test("it should return the corresponding date at 11:59:59", (function () {
                              return Jest.Expect[/* toEqual */12]($$Date.toDisplay(1522303199000), Jest.Expect[/* expect */0]($$Date.toDisplay($$Date.endOfDay(1522292400000))));
                            }));
              }));
        describe("when converting", (function () {
                describe("a float to a short time", (function () {
                        return Jest.test("it should give only the time in short format", (function () {
                                      return Jest.Expect[/* toEqual */12]("9:00 PM", Jest.Expect[/* expect */0]($$Date.toShortTime(1522292400000)));
                                    }));
                      }));
                describe("a float to a formatted date/time", (function () {
                        return Jest.test("it should format the float to a human readable format", (function () {
                                      return Jest.Expect[/* toEqual */12](formatted, Jest.Expect[/* expect */0]($$Date.toDisplay(1522292400000)));
                                    }));
                      }));
                describe("a formatted date/time to a float", (function () {
                        return Jest.test("it should parse the human readable format to a float", (function () {
                                      return Jest.Expect[/* toEqual */12](1522292400000, Jest.Expect[/* expect */0]($$Date.fromDisplay($$Date.toDisplay(1522292400000))));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("when validating", (function () {
                describe("an invalid date/time to a float", (function () {
                        return Jest.test("it should be false", (function () {
                                      return Jest.Expect[/* toEqual */12](/* false */0, Jest.Expect[/* expect */0]($$Date.isValid("Thu Mar 32 2018 13:08:27 GMT-0600 (CST)")));
                                    }));
                      }));
                describe("a valid date/time to a float", (function () {
                        return Jest.test("it should be true", (function () {
                                      return Jest.Expect[/* toEqual */12](/* true */1, Jest.Expect[/* expect */0]($$Date.isValid("Thu Mar 29 2018 13:08:27 GMT-0600 (CST)")));
                                    }));
                      }));
                return /* () */0;
              }));
        describe("when getting the date one month before", (function () {
                return Jest.test("it should give a date that is 30.44 days prior", (function () {
                              return Jest.Expect[/* toEqual */12]("27-2-2018", Jest.Expect[/* expect */0]($$Date.toDisplayDate($$Date.oneMonthBefore(1522350507000))));
                            }));
              }));
        return /* () */0;
      }));

var unixTime = 1522292400000;

exports.unixTime = unixTime;
exports.formatted = formatted;
/*  Not a pure module */
